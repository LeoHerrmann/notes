{"version":3,"sources":["index.js"],"names":["Header","props","toggleSortingMenu","state","sortingMenuVisible","setState","prevProps","searchInputVisible","this","searchInput","focus","header","view","className","onClick","toggleSearchInput","type","placeholder","ref","inputEl","onChange","e","updateFilterString","target","value","aria-label","SortingMenu","sortBy","changeSortBy","visible","toggleVisibility","closeEditor","React","Component","menu","optionGroups","option","push","id","name","checked","htmlFor","charAt","toUpperCase","slice","NotesList","hideMenu","menuVisible","menuID","preventDefault","listContent","notes","JSON","parse","stringify","filter","note","titleContainssearchWord","title","toLowerCase","indexOf","searchWord","contentContainssearchWord","content","sort","a","b","created","lastModified","titleA","titleB","length","displayDate","Date","toLocaleString","openNote","onContextMenu","showMenu","NoteListMenu","hide","deleteNote","createNote","noteTitle","NoteEditor","handleTitleChange","event","noteToEdit","handleContentChange","saveNote","toJSON","App","idCounter","editorID","notesData","localStorage","getItem","editedNote","isNewNote","i","saveToLocalStorage","splice","setItem","criterion","string","main_content","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebc7bc42.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './fontello/css/fontello.css';\n\n\n//Header\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            sortingMenuVisible: false\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.searchInputVisible === false && this.props.searchInputVisible === true) {\n            this.searchInput.focus();\n        }\n    }\n\n    toggleSortingMenu = () => {\n        if (this.state.sortingMenuVisible) {\n            this.setState({sortingMenuVisible: false});\n        }\n        else {\n            this.setState({sortingMenuVisible: true});\n        }\n    };\n\n    render() {\n        var header;\n\n        if (this.props.view === \"noteslist\" && this.props.searchInputVisible) {\n            header =\n                <header className=\"search_view\">\n                    <button className=\"icon-back\" onClick={() => this.props.toggleSearchInput()}></button>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Searchâ€¦\"\n                        ref={inputEl => (this.searchInput = inputEl)}\n                        onChange={(e) => {this.props.updateFilterString(e.target.value)}}\n                    />\n                </header>;\n        }\n\n        else if (this.props.view === \"noteslist\") {\n            header =\n                <header className=\"notes_list_view\">\n                    <h1>Notes</h1>\n\n                    <button\n                        className=\"icon-search\"\n                        onClick={() => this.props.toggleSearchInput()}\n                        aria-label=\"search\"\n                    ></button>\n                    <button\n                        className=\"icon-sort\"\n                        onClick={() => this.toggleSortingMenu()}\n                        aria-label=\"sort\"\n                    ></button>\n                    <SortingMenu\n                        sortBy = {this.props.sortBy}\n                        changeSortBy = {this.props.changeSortBy}\n                        visible={this.state.sortingMenuVisible}\n                        toggleVisibility={this.toggleSortingMenu}\n                    />\n                </header>;\n        }\n\n        else if (this.props.view === \"noteeditor\") {\n            header =\n                <header className=\"edit_view\">\n                    <button className=\"icon-back\" onClick={this.props.closeEditor}></button>\n                    <h1>Edit</h1>\n                </header>;\n        }\n\n        return (\n            <div>\n                {header}\n                <div className=\"placeholder\"></div>\n            </div>\n        );\n    }\n}\n\nclass SortingMenu extends React.Component {\n    render() {\n        var menu = null;\n\n        if (this.props.visible) {\n            let optionGroups = [];\n\n            for (let option of [\"title\", \"created\", \"lastModified\"]) {\n                optionGroups.push(\n                    <div key={option + \"_group\"}>\n                        <input\n                            id={option + \"_radio\"} type=\"radio\" name=\"sortBy\" value={option}\n                            checked={this.props.sortBy === option} \n                            onChange={() => {this.props.changeSortBy(option)}}\n                        />\n                        <label htmlFor={option + \"_radio\"}>{option.charAt(0).toUpperCase() + option.slice(1)}</label>\n                    </div>\n                )\n            }\n\n            menu = \n                <div className=\"sortingMenu\">\n                    <div className=\"overlay\" onClick={() => this.props.toggleVisibility()}></div>\n\n                    <div className=\"content\">\n                        <div>Sort By</div>\n                        {optionGroups}\n                    </div>\n                </div>\n        }\n\n        return menu;\n    }\n}\n\n\n//NotesList\n\nclass NotesList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            menuVisible: false,\n            menuID: null\n        };\n    }\n\n    showMenu(e, id) {\n        e.preventDefault();\n\n        this.setState({\n            menuVisible: true,\n            menuID: id\n        });\n    }\n\n    hideMenu = () => {\n        this.setState({\n            menuVisible: false,\n            menuID: null\n        });\n    }\n\n    render(props) {\n        var listContent = <div className=\"placeholder_text\">No notes</div>;\n\n        var notes = JSON.parse(JSON.stringify(this.props.notes));\n\n        //filter notes\n        notes = notes.filter((note) => {\n            let titleContainssearchWord = note.title.toLowerCase().indexOf(this.props.searchWord) >= 0;\n            let contentContainssearchWord = note.content.toLowerCase().indexOf(this.props.searchWord) >= 0; \n\n            return titleContainssearchWord || contentContainssearchWord;\n        });\n\n        //sort notes\n        if (this.props.sortBy === \"created\") {\n            notes = notes.sort((a, b) => (a.created < b.created) ? 1 : -1);\n        }\n\n        else if (this.props.sortBy === \"lastModified\") {\n            notes = notes.sort((a, b) => (a.lastModified < b.lastModified) ? 1 : -1);\n        }\n\n        else if (this.props.sortBy === \"title\") {\n            notes = notes.sort((a, b) => {\n                var titleA = a.title.toUpperCase();\n                var titleB = b.title.toUpperCase();\n\n                if (titleA < titleB) {\n                    return -1;\n                }\n                else if (titleA > titleB) {\n                    return 1;\n                }\n                else {\n                    return 0;\n                }\n            });\n        }\n\n        //list notes\n        if (notes.length > 0) {\n            listContent = [];\n\n            for (let note of notes) {\n                var displayDate = this.props.sortBy === \"lastModified\" ? \n                    \"Last modified: \" + new Date(note.lastModified).toLocaleString() :\n                    \"Created: \" + new Date(note.created).toLocaleString();\n\n                listContent.push(\n                    <div\n                        className=\"note\"\n                        key={note.id}\n                        onClick={() => this.props.openNote(note.id)}\n                        onContextMenu={(e) => this.showMenu(e, note.id)}\n                    >\n                        <div className=\"title\">{note.title}</div>\n                        <div className=\"date\">{displayDate}</div>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div className=\"notes_list\">\n                {listContent}\n                <NoteListMenu\n                    visible={this.state.menuVisible}\n                    id={this.state.menuID}\n                    notes={this.props.notes}\n                    hide={this.hideMenu}\n                    deleteNote={this.props.deleteNote}\n                />\n                <button\n                    className=\"icon-add primary\"\n                    onClick={this.props.createNote}\n                    aria-label=\"create\"\n                ></button>\n            </div>\n        );\n    }\n}\n\nclass NoteListMenu extends React.Component{\n    render() {\n        var menu = null;\n\n        if (this.props.visible) {\n            var noteTitle;\n\n            for (let note of this.props.notes) {\n                if (note.id === this.props.id) {\n                    noteTitle = note.title;\n                    break;\n                }\n            }\n\n            menu = \n                <div className=\"menu\">\n                    <div\n                        className=\"overlay\"\n                        onClick={() => this.props.hide()}\n                    ></div>\n\n                    <div className=\"content\">\n                        <h2>{noteTitle}</h2>\n                        <div\n                            className=\"text_negative\"\n                            onClick={() => {this.props.deleteNote(this.props.id); this.props.hide();}}\n                        >\n                            <i className=\"icon-delete\"></i>\n                            Delete\n                        </div>\n                        <div onClick={() => this.props.hide()}>\n                            <i className=\"icon-cancel\"></i>\n                            Cancel\n                        </div>\n                    </div>\n                </div>;\n        }\n\n        return menu;\n    }\n}\n\n\n//NoteEditor\n\nclass NoteEditor extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            noteToEdit: props.noteToEdit\n        };\n    }\n\n    componentDidUpdate() {\n        if (this.props.noteToEdit.id !== this.state.noteToEdit.id) {\n            this.setState({\n                noteToEdit: this.props.noteToEdit\n            });\n        }\n    }\n\n    handleTitleChange = event => {\n        this.setState({\n            noteToEdit: {\n                id: this.state.noteToEdit.id,\n                title: event.target.value,\n                content: this.state.noteToEdit.content,\n                created: this.state.noteToEdit.created\n            }\n        });\n    };\n\n    handleContentChange = event => {\n        this.setState({\n            noteToEdit: {\n                id: this.state.noteToEdit.id,\n                title: this.state.noteToEdit.title,\n                content: event.target.value,\n                created: this.state.noteToEdit.created\n            }\n        });\n    };\n\n    render(props) {\n        if (this.props.noteToEdit.id) {\n            return (\n                <div className=\"note_editor\">\n                    <input\n                        value={this.state.noteToEdit.title}\n                        onChange={this.handleTitleChange}\n                        placeholder=\"Title\"\n                        type=\"text\"\n                    />\n                    <textarea\n                        value={this.state.noteToEdit.content}\n                        onChange={this.handleContentChange}\n                        placeholder=\"Content\"\n                    />\n                    <button\n                        className=\"save_note_button primary\"\n                        onClick={() => this.props.saveNote({\n                            id: this.state.noteToEdit.id,\n                            title: this.state.noteToEdit.title,\n                            content: this.state.noteToEdit.content,\n                            created: this.state.noteToEdit.created,\n                            lastModified: new Date().toJSON()\n                        })}\n                    >\n                        Save note\n                    </button>\n                </div>\n            )\n        }\n\n        else {\n            return null;\n        }\n\n    }\n}\n\n\n//App\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            idCounter: 1,\n            notes: [],\n            editorID: null,\n            sortBy: \"created\",\n            searchInputVisible: false,\n            searchWord: \"\",\n        };\n\n        var notesData = JSON.parse(localStorage.getItem(\"notesData\"));\n\n        if (notesData) {\n            this.state.idCounter = notesData.idCounter;\n            this.state.notes = notesData.notes;\n            this.state.sortBy = notesData.sortBy;\n        }\n    }\n\n    openNote(id) {\n        this.setState({\n            editorID: id,\n            searchInputVisible: false,\n            searchWord: \"\"\n        });\n    }\n\n    createNote() {\n        this.setState({\n            editorID: this.state.idCounter,\n            idCounter: this.state.idCounter + 1\n        });\n    }\n\n    saveNote(note) {\n        var editedNote = JSON.parse(JSON.stringify(note));\n        var notes = JSON.parse(JSON.stringify(this.state.notes));\n        var isNewNote = true;\n\n        for (let i in notes) {\n            if (notes[i].id === editedNote.id) {\n                notes[i] = note;\n                isNewNote = false;\n                break;\n            }\n        }\n\n        if (isNewNote) {\n            notes.push(editedNote);\n        }\n\n        this.setState({notes: notes}, () => {\n            this.saveToLocalStorage();\n        });\n    }\n\n    deleteNote(id) {\n        var notes = JSON.parse(JSON.stringify(this.state.notes));\n\n        for (let i in notes) {\n            if (notes[i].id === id) {\n                notes.splice(i, 1);\n                break;\n            }\n        }\n\n        this.setState({notes: notes}, () => {\n            this.saveToLocalStorage();\n        });\n    }\n\n    saveToLocalStorage() {\n        var notesData = {\n            notes: this.state.notes,\n            idCounter: this.state.idCounter,\n            sortBy: this.state.sortBy\n        };\n\n        localStorage.setItem(\"notesData\", JSON.stringify(notesData));\n    }\n\n    closeEditor() {\n        this.setState({editorID: null});\n    }\n\n    changeSortBy(criterion) {\n        this.setState({\n            sortBy: criterion\n        }, () => this.saveToLocalStorage());\n    }\n\n    toggleSearchInput() {\n        if (this.state.searchInputVisible === false) {\n            this.setState({\n                searchInputVisible: true\n            });\n        }\n        else {\n            this.setState({\n                searchInputVisible: false\n            });\n        }\n    }\n\n    updateFilterString(string) {\n        this.setState({searchWord: string.toLowerCase()});\n    }\n\n    render() {\n        var noteToEdit = {\n            id: this.state.editorID,\n            title: \"\",\n            content: \"\",\n            created: new Date().toJSON()\n        };\n\n        for (let note of this.state.notes) {\n            if (note.id === this.state.editorID) {\n                noteToEdit = JSON.parse(JSON.stringify(note));\n                break;\n            }\n        }\n\n        var view = this.state.editorID ? \"noteeditor\" : \"noteslist\";\n        var main_content;\n\n        if (view === \"noteslist\") {\n            main_content = \n                <NotesList\n                    notes={this.state.notes}\n                    sortBy={this.state.sortBy}\n                    searchWord={this.state.searchWord}\n                    openNote={(e) => this.openNote(e)}\n                    createNote={() => this.createNote()}\n                    deleteNote={(e) => this.deleteNote(e)}\n                />\n        }\n        else if (view === \"noteeditor\") {\n            main_content =\n                <NoteEditor\n                    noteToEdit={noteToEdit}\n                    saveNote={((e) => this.saveNote(e))}\n                />\n        }\n\n\n        return (\n            <div className=\"App\">\n                <Header\n                    view={view}\n                    searchInputVisible={this.state.searchInputVisible}\n                    sortBy={this.state.sortBy}\n                    closeEditor={() => this.closeEditor()}\n                    changeSortBy={(e) => this.changeSortBy(e)}\n                    toggleSearchInput={() => this.toggleSearchInput()}\n                    updateFilterString={(e) => this.updateFilterString(e)}\n                />\n \n                {main_content}\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <App/>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}